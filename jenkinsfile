pipeline {
  agent none
  options {
     timeout(time: 1, unit: 'HOURS')
   }
  parameters {
    booleanParam(name: 'UNITTEST', defaultValue: true, description: 'Enable UnitTests ?')
    booleanParam(name: 'CODEANALYSIS', defaultValue: true, description: 'Enable CODE-ANALYSIS ?')
  }


 stages {
  stage('Checkout')
  {
       agent { label 'demo' }
       steps { 
          git credentialsId: 'GitlabCred', url: 'https://gitlab.com/scmlearningcentre/wezvatech-cicd.git'
       }
  }
  stage('PreCheck')
  {
   agent { label 'demo' }
   when { 
     anyOf {
           changeset "samplejar/**"
           changeset "samplewar/**"
     }
   }
   steps {
       script {
          env.BUILDME = "yes" // Set env variable to enable further Build Stages
       }
   }
  }
  stage('Build')
  {
    when {environment name: 'BUILDME', value: 'yes'}
    agent { label 'demo' }
    steps { 
     script {
	    if (params.UNITTEST) {
		  unitstr = ""
	    } else {
		  unitstr = "-Dmaven.test.skip=true"
	    }
	
		echo "Building Jar Component ..."
		dir ("./samplejar") {
		   sh "mvn clean package ${unitstr}"
		}

		echo "Building War Component ..."
		dir ("./samplewar") {
           sh "mvn clean package "
		}
	 }
   }
  }
  stage('Code Coverage')
  {
   agent { label 'demo' }
   when {
     allOf {
         expression { return params.CODEANALYSIS }
         environment name: 'BUILDME', value: 'yes'
     }
   }
   steps {
     echo "Running Code Coverage ..."  
	 dir ("./samplejar") {
	   sh "mvn org.jacoco:jacoco-maven-plugin:0.5.5.201112152213:prepare-agent"
	 }
   }
  }
  stage('SonarQube Analysis') 
  {
    agent { label 'demo' }
    when {environment name: 'BUILDME', value: 'yes'}
    steps{
     withSonarQubeEnv('defaultsonarqube') {
	  dir ("./samplejar") {
             sh 'mvn sonar:sonar'
	  }
     } 
    }
  }
   stage("Quality Gate"){ 
    when {environment name: 'BUILDME', value: 'yes'}
    steps{
	 script {
	   timeout(time: 10, unit: 'MINUTES') { 
            def qg = waitForQualityGate() 
            if (qg.status != 'OK') {
              error "Pipeline aborted due to quality gate failure: ${qg.status}"
            }
           }
	 }
     }
   }
stage('Stage Artifacts') 
  {          
   agent { label 'demo' }
   when {environment name: 'BUILDME', value: 'yes'}
   steps {          
    script { 
	    /* Define the Artifactory Server details */
        def server = Artifactory.server 'defaultjfrog'
        def uploadSpec = """{
            "files": [{
            "pattern": "samplewar/target/samplewar.war", 
            "target": "Demo"                   
            }]
        }"""
        
        /* Upload the war to  Artifactory repo */
        server.upload(uploadSpec)
    }
   }
  }
 stage('Build Image') 
  {
    agent { label 'demo' }
    when {environment name: 'BUILDME', value: 'yes'}
    steps{
      script {
          docker.withRegistry( 'https://registry.hub.docker.com', 'dockerhubcred' ) {
             /* Build Docker Image locally */
             myImage = docker.build("adamtravis/wezvacicd:latest")

             /* Push the container to the Registry */
             myImage.push()
          }
      }
    }
  }
  stage ('Deploy'){
    agent {label 'demo'}
    when {environment name: 'BUILDME', value: 'yes'}
    steps {
        git credentialsId: 'GitlabCred', url: 'https://gitlab.com/scmlearningcentre/wezvatech-cicd.git'
        step([$class: 'DockerComposeBuilder', dockerComposeFile: 'docker-compose.yml', option: [$class: 'StartAllServices'], useCustomDockerComposeFile: false])
    }          
  }
  stage ('Smoke Test'){
    agent {label 'demo'}
    when {environment name: 'BUILDME', value: 'yes'}
    steps {
      catchError(buildResult: 'SUCCESS', message: 'TEST-CASES FAILED', stageResult: 'UNSTABLE')) {
         sh "sleep 10; chmod +x runsmokes.sh; ./runsmokes.sh"
      }
    }      
  }
 }
}
